server {

  listen 443 ssl;
  listen [::]:443 ssl;

  server_name packages.hermes.com;

  client_body_in_file_only clean;
  client_body_buffer_size 32K;

  client_max_body_size 5M;

  sendfile on;
  send_timeout 300s;

  root /app/hermes-packages/hermes-packages-www/dist/hermes-packages-web;
  index index.html;

  location / {

    # Try to serve static files first, else fallback to index.html
    try_files $uri $uri/ /index.html;
  }

  location /api {
    try_files $uri $uri/ @api;
  }

    # Api backend
  location @api {
    proxy_pass http://localhost:8888;
    proxy_redirect off;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-HTTPS-Protocol $ssl_protocol;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Non-standard de-facto
    proxy_set_header X-Forwarded-Host $remote_addr;
    proxy_set_header X-Forwarded-Proto $ssl_protocol; # we are using only https
    proxy_set_header Forwarded $proxy_add_x_forwarded_for; # standardized way
    proxy_set_header Host $http_host;

    rewrite ^(.*)$ $1 break;
    rewrite_log on;

    return 403;
  }
}

server {

  listen 80;
  listen [::]:80;

  server_name packages.hermes.com;

  client_body_in_file_only clean;
  client_body_buffer_size 32K;

  client_max_body_size 5M;

  sendfile on;
  send_timeout 300s;

  root /app/hermes-packages/hermes-packages-www/dist/hermes-packages-web;
  index index.html;

  location / {

    # Try to serve static files first, else fallback to index.html
    try_files $uri $uri/ /index.html;
  }

  location /api {
    try_files $uri $uri/ @api;
  }

    # Api backend
  location @api {
    proxy_pass http://localhost:8888;
    proxy_redirect off;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-HTTPS-Protocol $ssl_protocol;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Non-standard de-facto
    proxy_set_header X-Forwarded-Host $remote_addr;
    proxy_set_header X-Forwarded-Proto $ssl_protocol; # we are using only https
    proxy_set_header Forwarded $proxy_add_x_forwarded_for; # standardized way
    proxy_set_header Host $http_host;

    rewrite ^(.*)$ $1 break;
    rewrite_log on;

    return 403;
  }
}